 .../src/apps/mdns/mdns.c                           |  52 ++-
 .../src/include/lwip/apps/mdns.h                   |   7 +-
 lwip/net_al/lwipopts.h                             | 478 ++++++++++-----------
 3 files changed, 292 insertions(+), 245 deletions(-)

diff --git a/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/apps/mdns/mdns.c b/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/apps/mdns/mdns.c
index 1fdf607..b629d87 100644
--- a/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/apps/mdns/mdns.c
+++ b/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/apps/mdns/mdns.c
@@ -1864,7 +1864,7 @@ mdns_resp_netif_settings_changed(struct netif *netif)
  * @return ERR_OK if netif was added, an err_t otherwise
  */
 err_t
-mdns_resp_add_netif(struct netif *netif, const char *hostname, u32_t dns_ttl)
+mdns_resp_add_netif(struct netif *netif, const char *hostname)
 {
   err_t res;
   struct mdns_host* mdns;
@@ -1880,7 +1880,7 @@ mdns_resp_add_netif(struct netif *netif, const char *hostname, u32_t dns_ttl)
 
   memset(mdns, 0, sizeof(struct mdns_host));
   MEMCPY(&mdns->name, hostname, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(hostname)));
-  mdns->dns_ttl = dns_ttl;
+  mdns->dns_ttl = 60 * 10;
 
   /* Join multicast groups */
 #if LWIP_IPV4
@@ -1942,6 +1942,30 @@ mdns_resp_remove_netif(struct netif *netif)
   return ERR_OK;
 }
 
+err_t mdns_resp_rename_netif(struct netif *netif, const char *hostname)
+{
+  struct mdns_host* mdns;
+
+  LWIP_ERROR("mdns_resp_add_netif: netif != NULL", (netif != NULL), return ERR_VAL);
+  LWIP_ERROR("mdns_resp_add_netif: Hostname too long", (strlen(hostname) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
+
+  LWIP_ASSERT("mdns_resp_add_service: netif != NULL", netif);
+  mdns = NETIF_TO_HOST(netif);
+  LWIP_ERROR("mdns_resp_add_service: Not an mdns netif", (mdns != NULL), return ERR_VAL);
+
+  memset(&mdns->name, 0, MDNS_LABEL_MAXLEN);
+  MEMCPY(&mdns->name, hostname, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(hostname)));
+
+  /* Announce on IPv6 and IPv4 */
+#if LWIP_IPV6
+  mdns_announce(netif, IP6_ADDR_ANY);
+#endif
+#if LWIP_IPV4
+  mdns_announce(netif, IP4_ADDR_ANY);
+#endif
+  return ERR_OK;
+}
+
 /**
  * @ingroup mdns
  * Add a service to the selected network interface.
@@ -1958,7 +1982,7 @@ mdns_resp_remove_netif(struct netif *netif)
  * @return ERR_OK if the service was added to the netif, an err_t otherwise
  */
 err_t
-mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_proto proto, u16_t port, u32_t dns_ttl, service_get_txt_fn_t txt_fn, void *txt_data)
+mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_proto proto, u16_t port, service_get_txt_fn_t txt_fn, void *txt_data)
 {
   int i;
   int slot = -1;
@@ -1992,7 +2016,7 @@ mdns_resp_add_service(struct netif *netif, const char *name, const char *service
   srv->txt_userdata = txt_data;
   srv->proto = (u16_t)proto;
   srv->port = port;
-  srv->dns_ttl = dns_ttl;
+  srv->dns_ttl = 3600;
 
   mdns->services[slot] = srv;
 
@@ -2007,6 +2031,26 @@ mdns_resp_add_service(struct netif *netif, const char *name, const char *service
   return ERR_OK;
 }
 
+err_t mdns_resp_del_service(struct netif *netif, u8_t slot)
+{
+  struct mdns_host* mdns;
+
+  LWIP_ASSERT("mdns_resp_add_service: netif != NULL", netif);
+  mdns = NETIF_TO_HOST(netif);
+  LWIP_ERROR("mdns_resp_add_service: Not an mdns netif", (mdns != NULL), return ERR_VAL);
+
+  mdns->services[slot] = NULL;
+
+  /* Announce on IPv6 and IPv4 */
+#if LWIP_IPV6
+  mdns_announce(netif, IP6_ADDR_ANY);
+#endif
+#if LWIP_IPV4
+  mdns_announce(netif, IP4_ADDR_ANY);
+#endif
+  return ERR_OK;
+}
+
 /**
  * @ingroup mdns
  * Call this function from inside the service_get_txt_fn_t callback to add text data.
diff --git a/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/include/lwip/apps/mdns.h b/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/include/lwip/apps/mdns.h
index d036816..37b9f0e 100644
--- a/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/include/lwip/apps/mdns.h
+++ b/lwip/lwip-STABLE-2_0_2_RELEASE_VER/src/include/lwip/apps/mdns.h
@@ -57,10 +57,13 @@ typedef void (*service_get_txt_fn_t)(struct mdns_service *service, void *txt_use
 
 void mdns_resp_init(void);
 
-err_t mdns_resp_add_netif(struct netif *netif, const char *hostname, u32_t dns_ttl);
+err_t mdns_resp_add_netif(struct netif *netif, const char *hostname);
 err_t mdns_resp_remove_netif(struct netif *netif);
+err_t mdns_resp_rename_netif(struct netif *netif, const char *hostname);
+
+s8_t  mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_proto proto, u16_t port, service_get_txt_fn_t txt_fn, void *txt_userdata);
+err_t mdns_resp_del_service(struct netif *netif, u8_t slot);
 
-err_t mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_proto proto, u16_t port, u32_t dns_ttl, service_get_txt_fn_t txt_fn, void *txt_userdata);
 err_t mdns_resp_add_service_txtitem(struct mdns_service *service, const char *txt, u8_t txt_len);
 void mdns_resp_netif_settings_changed(struct netif *netif);
 
diff --git a/lwip/net_al/lwipopts.h b/lwip/net_al/lwipopts.h
index 183b2b0..826a7df 100644
--- a/lwip/net_al/lwipopts.h
+++ b/lwip/net_al/lwipopts.h
@@ -1,239 +1,239 @@
-/*
- * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
- * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
- * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
- * OF SUCH DAMAGE.
- *
- * This file is part of the lwIP TCP/IP stack.
- *
- * Author: Simon Goldschmidt
- *
- */
-#ifndef LWIP_HDR_LWIPOPTS_H__
-#define LWIP_HDR_LWIPOPTS_H__
-
-#include "rwnx_config.h"
-
-#include "rtos.h"
-#include "fhost_rx_def.h"
-
-#if defined(LWIP_TIMEVAL_PRIVATE) && !LWIP_TIMEVAL_PRIVATE
-#   include <time.h>
-#endif
-
-uint16_t fhost_ip_chksum(const void *dataptr, int len);
-
-#define LWIP_NETIF_API                1
-
-#define TCPIP_MBOX_SIZE               10
-#define TCPIP_THREAD_STACKSIZE        TASK_STACK_SIZE_WIFI_TCPIP
-#define TCPIP_THREAD_PRIO             TASK_PRIORITY_WIFI_TCPIP
-
-#define DEFAULT_THREAD_STACKSIZE      1024
-#define DEFAULT_THREAD_PRIO           1
-#define DEFAULT_RAW_RECVMBOX_SIZE     32
-#define DEFAULT_UDP_RECVMBOX_SIZE     32
-#define DEFAULT_TCP_RECVMBOX_SIZE     32
-#define DEFAULT_ACCEPTMBOX_SIZE       32
-
-#define LWIP_NETIF_LOOPBACK           1
-#define LWIP_HAVE_LOOPIF              1
-#define LWIP_LOOPBACK_MAX_PBUFS       0
-
-#define LWIP_CHKSUM_ALGORITHM         3
-#define LWIP_CHKSUM                   fhost_ip_chksum
-#define LWIP_TCPIP_CORE_LOCKING_INPUT 1
-
-#define PBUF_LINK_ENCAPSULATION_HLEN  0
-
-#define IP_REASS_MAX_PBUFS            (FHOST_RX_BUF_CNT - 2)
-
-#define MEMP_NUM_NETBUF               32
-#define MEMP_NUM_NETCONN              10
-#define MEMP_NUM_UDP_PCB              16
-#define MEMP_NUM_REASSDATA            LWIP_MIN((IP_REASS_MAX_PBUFS), 5)
-
-#if NX_TXDESC_CNT0 > NX_TXDESC_CNT1
-#define MAC_TXQ_DEPTH_0_1             NX_TXDESC_CNT0
-#else
-#define MAC_TXQ_DEPTH_0_1             NX_TXDESC_CNT1
-#endif
-#if NX_TXDESC_CNT2 > NX_TXDESC_CNT3
-#define MAC_TXQ_DEPTH_2_3             NX_TXDESC_CNT2
-#else
-#define MAC_TXQ_DEPTH_2_3             NX_TXDESC_CNT3
-#endif
-#if MAC_TXQ_DEPTH_0_1 > MAC_TXQ_DEPTH_2_3
-#define MAC_TXQ_DEPTH                 MAC_TXQ_DEPTH_0_1
-#else
-#define MAC_TXQ_DEPTH                 MAC_TXQ_DEPTH_2_3
-#endif
-#if NX_REORD
-#define MAC_RXQ_DEPTH                 NX_REORD_BUF_SIZE
-#else
-#define MAC_RXQ_DEPTH                 4
-#endif
-
-#define TCP_MSS                       1460
-#if NX_TLS
-#define TCP_WND                       (MAC_RXQ_DEPTH * TCP_MSS / 4)
-#else
-#ifdef CFG_HS_IPERF
-#define TCP_WND                       (5 * MAC_RXQ_DEPTH * TCP_MSS / 3)
-#else
-#if defined(CONFIG_RWNX_LWIP) && defined(CFG_HOSTIF)
-#define TCP_WND                       (4 * MAC_RXQ_DEPTH * TCP_MSS)
-#else /* CONFIG_RWNX_LWIP & CFG_HOSTIF */
-#define TCP_WND                       (2 * MAC_RXQ_DEPTH * TCP_MSS)
-#endif /* CONFIG_RWNX_LWIP & CFG_HOSTIF */
-#endif
-#endif
-#define TCP_SND_BUF                   (2 * MAC_TXQ_DEPTH * TCP_MSS)
-#define TCP_QUEUE_OOSEQ               1
-#define MEMP_NUM_TCP_SEG              ((4 * TCP_SND_BUF) / TCP_MSS)
-#if defined(CONFIG_RWNX_LWIP) && defined(CFG_HOSTIF)
-#define MEMP_NUM_PBUF                 ((4 * TCP_SND_BUF) / TCP_MSS)
-#else /* CONFIG_RWNX_LWIP && CFG_HOSTIF */
-#define MEMP_NUM_PBUF                 ((2 * TCP_SND_BUF) / TCP_MSS)
-#endif /* CONFIG_RWNX_LWIP && CFG_HOSTIF */
-#define PBUF_POOL_SIZE                0
-#ifdef CFG_HS_IPERF
-#define LWIP_WND_SCALE                2
-#else
-#define LWIP_WND_SCALE                1
-#endif
-#define TCP_RCV_SCALE                 2
-#define TCP_SNDLOWAT                  LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/4),               \
-                                                        (2 * TCP_MSS) + 1),              \
-                                               (TCP_SND_BUF) - 1)
-
-#define MEM_MIN_TCP                   (2300 + MEMP_NUM_PBUF * (100 + PBUF_LINK_ENCAPSULATION_HLEN))
-#if NX_TG
-#define MEM_MIN_TG                    16384
-#else
-#define MEM_MIN_TG                    0
-#endif
-#if MEM_MIN_TCP > MEM_MIN_TG
-#define MEM_MIN                       MEM_MIN_TCP
-#else
-#define MEM_MIN                       MEM_MIN_TG
-#endif
-#define MEM_ALIGNMENT                 4
-#if PLF_WIFI_AUDIO
-#define MEM_SIZE                      0x3000
-#else
-#if MEM_MIN > 8192
-#define MEM_SIZE                      MEM_MIN
-#else
-#define MEM_SIZE                      8192
-#endif
-#endif
-
-#define LWIP_HOOK_FILENAME            "lwiphooks.h"
-
-#define LWIP_RAW                      1
-#define LWIP_MULTICAST_TX_OPTIONS     1
-
-//#define LWIP_TIMEVAL_PRIVATE          0  // use sys/time.h for struct timeval
-#define LWIP_PROVIDE_ERRNO            1
-
-#define LWIP_DHCP                     1
-#define LWIP_DNS                      1
-#define LWIP_NETIF_HOSTNAME           1
-
-/* Enable IGMP and MDNS for MDNS tests */
-#define LWIP_IGMP                       1
-#define LWIP_MDNS_RESPONDER             1
-#define LWIP_NUM_NETIF_CLIENT_DATA      (LWIP_MDNS_RESPONDER)
-
-#define DNS_TABLE_SIZE                  6
-#if PLF_SNTP
-#define SNTP_CHECK_RESPONSE             0
-#define SNTP_RECV_TIMEOUT               1500
-#define LWIP_SNTP                       10
-#define SNTP_SERVER_DNS                 1
-#define LWIP_DHCP_MAX_NTP_SERVERS       6
-#if SNTP_SERVER_DNS
-#define SNTP_SERVER_ADDRESS            "pool.ntp.org"
-#if 1
-#define SNTP_SERVER_ADDRESS1            "ntp.aliyun.com"
-#define SNTP_SERVER_ADDRESS2            "ntp.nict.jp"
-#define SNTP_SERVER_ADDRESS3            "us.ntp.org.cn"
-#define SNTP_SERVER_ADDRESS4            "ntps1-0.cs.tu-berlin.de"
-#define SNTP_SERVER_ADDRESS5            "Time1.Stupi.SE"
-#endif
-#else
-#define SNTP_SERVER_ADDRESS             0x0C431054
-#if 1
-#define SNTP_SERVER_ADDRESS1            0x58066BCB
-#define SNTP_SERVER_ADDRESS2            0x8D6FB6C1
-#define SNTP_SERVER_ADDRESS3            0xF3EEF385
-#define SNTP_SERVER_ADDRESS4            0xCAFEDAD8
-#define SNTP_SERVER_ADDRESS5            0x968F24C0
-#endif
-#endif
-#else
-#define LWIP_SNTP                       0
-#endif
-#define SNTP_SET_SYSTEM_TIME(sec)       sntp_time_update_and_show(sec, 0)
-
-#if PLF_WIFI_AUDIO
-#define LWIP_NETIF_TX_SINGLE_PBUF       1
-#define LWIP_SUPPORT_CUSTOM_PBUF        1
-#endif
-
-#define LWIP_DNS_SUPPORT_MDNS_QUERIES  1
-
-#if 0
-/* Prevent having to link sys_arch.c (we don't test the API layers in unit tests) */
-#define NO_SYS                          0
-#define LWIP_NETCONN                    0
-#define LWIP_SOCKET                     0
-#define SYS_LIGHTWEIGHT_PROT            0
-
-#define LWIP_IPV6                       1
-#define IPV6_FRAG_COPYHEADER            1
-#define LWIP_IPV6_DUP_DETECT_ATTEMPTS   0
-
-/* Turn off checksum verification of fuzzed data */
-#define CHECKSUM_CHECK_IP               0
-#define CHECKSUM_CHECK_UDP              0
-#define CHECKSUM_CHECK_TCP              0
-#define CHECKSUM_CHECK_ICMP             0
-#define CHECKSUM_CHECK_ICMP6            0
-
-/* Minimal changes to opt.h required for tcp unit tests: */
-#define MEM_SIZE                        16000
-#define TCP_SND_QUEUELEN                40
-#define MEMP_NUM_TCP_SEG                TCP_SND_QUEUELEN
-#define TCP_SND_BUF                     (12 * TCP_MSS)
-#define TCP_WND                         (10 * TCP_MSS)
-#define LWIP_WND_SCALE                  1
-#define TCP_RCV_SCALE                   0
-#define PBUF_POOL_SIZE                  400 /* pbuf tests need ~200KByte */
-
-/* Minimal changes to opt.h required for etharp unit tests: */
-#define ETHARP_SUPPORT_STATIC_ENTRIES   1
-#endif
-
-#endif /* LWIP_HDR_LWIPOPTS_H__ */
+/*
+ * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+ * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+ * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+ * OF SUCH DAMAGE.
+ *
+ * This file is part of the lwIP TCP/IP stack.
+ *
+ * Author: Simon Goldschmidt
+ *
+ */
+#ifndef LWIP_HDR_LWIPOPTS_H__
+#define LWIP_HDR_LWIPOPTS_H__
+
+#include "rwnx_config.h"
+
+#include "rtos.h"
+#include "fhost_rx_def.h"
+
+#if defined(LWIP_TIMEVAL_PRIVATE) && !LWIP_TIMEVAL_PRIVATE
+#   include <time.h>
+#endif
+
+uint16_t fhost_ip_chksum(const void *dataptr, int len);
+
+#define LWIP_NETIF_API                1
+
+#define TCPIP_MBOX_SIZE               10
+#define TCPIP_THREAD_STACKSIZE        TASK_STACK_SIZE_WIFI_TCPIP
+#define TCPIP_THREAD_PRIO             TASK_PRIORITY_WIFI_TCPIP
+
+#define DEFAULT_THREAD_STACKSIZE      1024
+#define DEFAULT_THREAD_PRIO           1
+#define DEFAULT_RAW_RECVMBOX_SIZE     32
+#define DEFAULT_UDP_RECVMBOX_SIZE     32
+#define DEFAULT_TCP_RECVMBOX_SIZE     32
+#define DEFAULT_ACCEPTMBOX_SIZE       32
+
+#define LWIP_NETIF_LOOPBACK           1
+#define LWIP_HAVE_LOOPIF              1
+#define LWIP_LOOPBACK_MAX_PBUFS       0
+
+#define LWIP_CHKSUM_ALGORITHM         3
+#define LWIP_CHKSUM                   fhost_ip_chksum
+#define LWIP_TCPIP_CORE_LOCKING_INPUT 1
+
+#define PBUF_LINK_ENCAPSULATION_HLEN  0
+
+#define IP_REASS_MAX_PBUFS            (FHOST_RX_BUF_CNT - 2)
+
+#define MEMP_NUM_NETBUF               32
+#define MEMP_NUM_NETCONN              16
+#define MEMP_NUM_UDP_PCB              16
+#define MEMP_NUM_REASSDATA            LWIP_MIN((IP_REASS_MAX_PBUFS), 5)
+
+#if NX_TXDESC_CNT0 > NX_TXDESC_CNT1
+#define MAC_TXQ_DEPTH_0_1             NX_TXDESC_CNT0
+#else
+#define MAC_TXQ_DEPTH_0_1             NX_TXDESC_CNT1
+#endif
+#if NX_TXDESC_CNT2 > NX_TXDESC_CNT3
+#define MAC_TXQ_DEPTH_2_3             NX_TXDESC_CNT2
+#else
+#define MAC_TXQ_DEPTH_2_3             NX_TXDESC_CNT3
+#endif
+#if MAC_TXQ_DEPTH_0_1 > MAC_TXQ_DEPTH_2_3
+#define MAC_TXQ_DEPTH                 MAC_TXQ_DEPTH_0_1
+#else
+#define MAC_TXQ_DEPTH                 MAC_TXQ_DEPTH_2_3
+#endif
+#if NX_REORD
+#define MAC_RXQ_DEPTH                 NX_REORD_BUF_SIZE
+#else
+#define MAC_RXQ_DEPTH                 4
+#endif
+
+#define TCP_MSS                       1460
+#if NX_TLS
+#define TCP_WND                       (MAC_RXQ_DEPTH * TCP_MSS / 4)
+#else
+#ifdef CFG_HS_IPERF
+#define TCP_WND                       (5 * MAC_RXQ_DEPTH * TCP_MSS / 3)
+#else
+#if defined(CONFIG_RWNX_LWIP) && defined(CFG_HOSTIF)
+#define TCP_WND                       (4 * MAC_RXQ_DEPTH * TCP_MSS)
+#else /* CONFIG_RWNX_LWIP & CFG_HOSTIF */
+#define TCP_WND                       (2 * MAC_RXQ_DEPTH * TCP_MSS)
+#endif /* CONFIG_RWNX_LWIP & CFG_HOSTIF */
+#endif
+#endif
+#define TCP_SND_BUF                   (2 * MAC_TXQ_DEPTH * TCP_MSS)
+#define TCP_QUEUE_OOSEQ               1
+#define MEMP_NUM_TCP_SEG              ((4 * TCP_SND_BUF) / TCP_MSS)
+#if defined(CONFIG_RWNX_LWIP) && defined(CFG_HOSTIF)
+#define MEMP_NUM_PBUF                 ((4 * TCP_SND_BUF) / TCP_MSS)
+#else /* CONFIG_RWNX_LWIP && CFG_HOSTIF */
+#define MEMP_NUM_PBUF                 ((2 * TCP_SND_BUF) / TCP_MSS)
+#endif /* CONFIG_RWNX_LWIP && CFG_HOSTIF */
+#define PBUF_POOL_SIZE                0
+#ifdef CFG_HS_IPERF
+#define LWIP_WND_SCALE                2
+#else
+#define LWIP_WND_SCALE                1
+#endif
+#define TCP_RCV_SCALE                 2
+#define TCP_SNDLOWAT                  LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/4),               \
+                                                        (2 * TCP_MSS) + 1),              \
+                                               (TCP_SND_BUF) - 1)
+
+#define MEM_MIN_TCP                   (2300 + MEMP_NUM_PBUF * (100 + PBUF_LINK_ENCAPSULATION_HLEN))
+#if NX_TG
+#define MEM_MIN_TG                    16384
+#else
+#define MEM_MIN_TG                    0
+#endif
+#if MEM_MIN_TCP > MEM_MIN_TG
+#define MEM_MIN                       MEM_MIN_TCP
+#else
+#define MEM_MIN                       MEM_MIN_TG
+#endif
+#define MEM_ALIGNMENT                 4
+#if PLF_WIFI_AUDIO
+#define MEM_SIZE                      0x3000
+#else
+#if MEM_MIN > 8192
+#define MEM_SIZE                      MEM_MIN
+#else
+#define MEM_SIZE                      8192
+#endif
+#endif
+
+#define LWIP_HOOK_FILENAME            "lwiphooks.h"
+
+#define LWIP_RAW                      1
+#define LWIP_MULTICAST_TX_OPTIONS     1
+
+//#define LWIP_TIMEVAL_PRIVATE          0  // use sys/time.h for struct timeval
+#define LWIP_PROVIDE_ERRNO            1
+
+#define LWIP_DHCP                     1
+#define LWIP_DNS                      1
+#define LWIP_NETIF_HOSTNAME           1
+
+/* Enable IGMP and MDNS for MDNS tests */
+#define LWIP_IGMP                       1
+#define LWIP_MDNS_RESPONDER             1
+#define LWIP_NUM_NETIF_CLIENT_DATA      (LWIP_MDNS_RESPONDER)
+
+#define DNS_TABLE_SIZE                  6
+#if PLF_SNTP
+#define SNTP_CHECK_RESPONSE             0
+#define SNTP_RECV_TIMEOUT               1500
+#define LWIP_SNTP                       10
+#define SNTP_SERVER_DNS                 1
+#define LWIP_DHCP_MAX_NTP_SERVERS       6
+#if SNTP_SERVER_DNS
+#define SNTP_SERVER_ADDRESS            "pool.ntp.org"
+#if 1
+#define SNTP_SERVER_ADDRESS1            "ntp.aliyun.com"
+#define SNTP_SERVER_ADDRESS2            "ntp.nict.jp"
+#define SNTP_SERVER_ADDRESS3            "us.ntp.org.cn"
+#define SNTP_SERVER_ADDRESS4            "ntps1-0.cs.tu-berlin.de"
+#define SNTP_SERVER_ADDRESS5            "Time1.Stupi.SE"
+#endif
+#else
+#define SNTP_SERVER_ADDRESS             0x0C431054
+#if 1
+#define SNTP_SERVER_ADDRESS1            0x58066BCB
+#define SNTP_SERVER_ADDRESS2            0x8D6FB6C1
+#define SNTP_SERVER_ADDRESS3            0xF3EEF385
+#define SNTP_SERVER_ADDRESS4            0xCAFEDAD8
+#define SNTP_SERVER_ADDRESS5            0x968F24C0
+#endif
+#endif
+#else
+#define LWIP_SNTP                       0
+#endif
+#define SNTP_SET_SYSTEM_TIME(sec)       sntp_time_update_and_show(sec, 0)
+
+#if PLF_WIFI_AUDIO
+#define LWIP_NETIF_TX_SINGLE_PBUF       1
+#define LWIP_SUPPORT_CUSTOM_PBUF        1
+#endif
+
+#define LWIP_DNS_SUPPORT_MDNS_QUERIES  1
+
+#if 0
+/* Prevent having to link sys_arch.c (we don't test the API layers in unit tests) */
+#define NO_SYS                          0
+#define LWIP_NETCONN                    0
+#define LWIP_SOCKET                     0
+#define SYS_LIGHTWEIGHT_PROT            0
+
+#define LWIP_IPV6                       1
+#define IPV6_FRAG_COPYHEADER            1
+#define LWIP_IPV6_DUP_DETECT_ATTEMPTS   0
+
+/* Turn off checksum verification of fuzzed data */
+#define CHECKSUM_CHECK_IP               0
+#define CHECKSUM_CHECK_UDP              0
+#define CHECKSUM_CHECK_TCP              0
+#define CHECKSUM_CHECK_ICMP             0
+#define CHECKSUM_CHECK_ICMP6            0
+
+/* Minimal changes to opt.h required for tcp unit tests: */
+#define MEM_SIZE                        16000
+#define TCP_SND_QUEUELEN                40
+#define MEMP_NUM_TCP_SEG                TCP_SND_QUEUELEN
+#define TCP_SND_BUF                     (12 * TCP_MSS)
+#define TCP_WND                         (10 * TCP_MSS)
+#define LWIP_WND_SCALE                  1
+#define TCP_RCV_SCALE                   0
+#define PBUF_POOL_SIZE                  400 /* pbuf tests need ~200KByte */
+
+/* Minimal changes to opt.h required for etharp unit tests: */
+#define ETHARP_SUPPORT_STATIC_ENTRIES   1
+#endif
+
+#endif /* LWIP_HDR_LWIPOPTS_H__ */